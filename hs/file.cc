// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// http://code.google.com/p/protobuf/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Author: kenton@google.com (Kenton Varda)
//  Based on original Protocol Buffers design by
//  Sanjay Ghemawat, Jeff Dean, and others.

// Copyright (c) 2008-2014, Dave Benson and the protobuf-c authors.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Modified to implement C code by Dave Benson.

#include <google/protobuf/io/printer.h>
#include <hs/c_extension.h>
#include <hs/c_service.h>
#include <hs/enum.h>
#include <hs/file.h>
#include <hs/helpers.h>
#include <hs/hs.h>
#include <hs/message.h>

namespace google::protobuf::compiler::hs {

// ===================================================================

FileGenerator::FileGenerator(const FileDescriptor* file,
                             const std::string& dllexport_decl)
    : file_(file),
      enum_generators_(
          new std::unique_ptr<EnumGenerator>[file->enum_type_count()]),
      message_generators_(
          new std::unique_ptr<MessageGenerator>[file->message_type_count()]) {
  for (int i = 0; i < file->enum_type_count(); i++) {
    enum_generators_[i].reset(
        new EnumGenerator(file->enum_type(i), dllexport_decl));
  }
  for (int i = 0; i < file->message_type_count(); i++) {
    message_generators_[i].reset(
        new MessageGenerator(file->message_type(i), dllexport_decl));
  }
}

FileGenerator::~FileGenerator() {}

void FileGenerator::GenerateHs(io::Printer* printer) {
  std::string filename_identifier = FilenameIdentifier(file_->name());

  int min_header_version = 1000000;
#if GOOGLE_PROTOBUF_VERSION >= 4023000
  if (FileDescriptorLegacy(file_).syntax() ==
      FileDescriptorLegacy::SYNTAX_PROTO3) {
#else
  if (file_->syntax() == FileDescriptor::SYNTAX_PROTO3) {
#endif
    min_header_version = 1003000;
  }

  // Generate top of header.
  printer->Print(
      "# Generated by the protocol buffer compiler.  DO NOT EDIT!\n"
      "# Generated from: $filename$\n"
      "#\n",
      "filename", file_->name(), "filename_identifier", filename_identifier);

  for (int i = 0; i < file_->dependency_count(); i++) {
    printer->Print("from $dependency$ import *\n", "dependency",
                   StripProto(file_->dependency(i)->name()));
  }

  printer->Print("\n");

  // Generate forward declarations of classes.
  // for (int i = 0; i < file_->message_type_count(); i++) {
  //  message_generators_[i]->GenerateStructTypedef(printer);
  //}

  printer->Print("\n");

  // Generate enum definitions.
  printer->Print("\n# --- enums ---\n\n");
  // for (int i = 0; i < file_->message_type_count(); i++) {
  //   message_generators_[i]->GenerateEnumDefinitions(printer);
  // }
  for (int i = 0; i < file_->enum_type_count(); i++) {
    enum_generators_[i]->GenerateDefinition(printer);
  }

  // Generate class definitions.
  printer->Print("\n# --- messages ---\n\n");
  for (int i = 0; i < file_->message_type_count(); i++) {
    message_generators_[i]->GenerateStructDefinition(printer);
  }
}

// void FileGenerator::GenerateSource(io::Printer* printer) {
//   printer->Print(
//     "/* Generated by the protocol buffer compiler.  DO NOT EDIT! */\n"
//     "/* Generated from: $filename$ */\n"
//     "\n"
//     "/* Do not generate deprecated warnings for self */\n"
//     "#ifndef PROTOBUF_C__NO_DEPRECATED\n"
//     "#define PROTOBUF_C__NO_DEPRECATED\n"
//     "#endif\n"
//     "\n"
//     "#include \"$basename$.pb-c.h\"\n",
//     "filename", file_->name(),
//     "basename", StripProto(file_->name()));
//
//   const ProtobufCFileOptions opt = file_->options().GetExtension(pb_c_file);
//
//   for (int i = 0; i < file_->message_type_count(); i++) {
//     message_generators_[i]->GenerateHelperFunctionDefinitions(
//						printer,
//						opt.has_gen_pack_helpers(),
//						opt.gen_pack_helpers(),
//						opt.gen_init_helpers());
//   }
//   for (int i = 0; i < file_->message_type_count(); i++) {
//     message_generators_[i]->GenerateMessageDescriptor(printer,
//						      opt.gen_init_helpers());
//   }
//   for (int i = 0; i < file_->enum_type_count(); i++) {
//     enum_generators_[i]->GenerateEnumDescriptor(printer);
//   }
//   for (int i = 0; i < file_->service_count(); i++) {
//     service_generators_[i]->GenerateCFile(printer);
//   }
//
// }
}  // namespace google::protobuf::compiler::hs
